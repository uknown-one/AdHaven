// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profiles
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  firstName   String?
  lastName    String?
  avatar      String?
  bio         String?
  phone       String?
  location    String?
  website     String?
  verified    Boolean  @default(false)
  emailVerified Boolean @default(false)
  role        UserRole @default(USER)

  // Authentication
  passwordHash String?
  refreshTokens RefreshToken[]

  // Social login
  googleId    String? @unique
  githubId    String? @unique

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?

  // Relations
  listings    Listing[]
  favorites   Favorite[]
  reviews     Review[]
  reviewsGiven Review[] @relation("ReviewAuthor")
  messages    Message[]
  reports     Report[]
  transactions Transaction[]
  notifications Notification[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

// Category model for organizing listings
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  icon        String?
  color       String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  active      Boolean   @default(true)
  sortOrder   Int       @default(0)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  listings    Listing[]

  @@map("categories")
}

// Main listing model
model Listing {
  id          String      @id @default(cuid())
  title       String
  description String
  price       Decimal?
  priceType   PriceType   @default(FIXED)
  currency    String      @default("USD")
  condition   Condition?
  brand       String?
  model       String?

  // Location
  location    String?
  latitude    Float?
  longitude   Float?
  city        String?
  state       String?
  country     String?
  zipCode     String?

  // External links
  externalUrl String?
  affiliateUrl String?

  // Status and visibility
  status      ListingStatus @default(PENDING)
  featured    Boolean       @default(false)
  premium     Boolean       @default(false)
  sponsored   Boolean       @default(false)
  active      Boolean       @default(true)

  // Metrics
  views       Int           @default(0)
  favorites   Int           @default(0)
  clicks      Int           @default(0)

  // Premium features
  premiumUntil DateTime?
  featuredUntil DateTime?
  sponsoredUntil DateTime?

  // Timestamps
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  expiresAt   DateTime?
  publishedAt DateTime?

  // Relations
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String
  category    Category      @relation(fields: [categoryId], references: [id])
  images      ListingImage[]
  tags        ListingTag[]
  favorites   Favorite[]
  reviews     Review[]
  messages    Message[]
  reports     Report[]
  transactions Transaction[]

  @@map("listings")
}

// Image model for listing photos
model ListingImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  width     Int?
  height    Int?
  size      Int?
  mimeType  String?
  sortOrder Int     @default(0)

  // Relations
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())

  @@map("listing_images")
}

// Tag model for listing categorization
model Tag {
  id       String       @id @default(cuid())
  name     String       @unique
  slug     String       @unique
  color    String?

  // Relations
  listings ListingTag[]

  // Timestamps
  createdAt DateTime    @default(now())

  @@map("tags")
}

model ListingTag {
  listingId String
  tagId     String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([listingId, tagId])
  @@map("listing_tags")
}

// Favorite model for user bookmarks
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  listingId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())

  @@unique([userId, listingId])
  @@map("favorites")
}

// Review model for seller ratings
model Review {
  id        String     @id @default(cuid())
  rating    Int        // 1-5 stars
  comment   String?
  helpful   Int        @default(0)

  // Relations
  listingId String
  listing   Listing    @relation(fields: [listingId], references: [id], onDelete: Cascade)
  userId    String     // Reviewer
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  authorId  String     // Review author
  author    User       @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, listingId])
  @@map("reviews")
}

// Message model for user communication
model Message {
  id        String      @id @default(cuid())
  content   String
  read      Boolean     @default(false)

  // Relations
  senderId  String
  sender    User        @relation(fields: [senderId], references: [id], onDelete: Cascade)
  listingId String?
  listing   Listing?    @relation(fields: [listingId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime    @default(now())

  @@map("messages")
}

// Report model for content moderation
model Report {
  id        String      @id @default(cuid())
  reason    ReportReason
  details   String?
  status    ReportStatus @default(PENDING)

  // Relations
  reporterId String
  reporter   User        @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  listingId  String?
  listing    Listing?    @relation(fields: [listingId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt  DateTime    @default(now())
  resolvedAt DateTime?

  @@map("reports")
}

// Transaction model for premium features
model Transaction {
  id            String            @id @default(cuid())
  amount        Decimal
  currency      String            @default("USD")
  type          TransactionType
  status        TransactionStatus @default(PENDING)
  stripeId      String?           @unique
  description   String?

  // Relations
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingId     String?
  listing       Listing?          @relation(fields: [listingId], references: [id])

  // Timestamps
  createdAt     DateTime          @default(now())
  completedAt   DateTime?

  @@map("transactions")
}

// Notification model for user alerts
model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  data      Json?            // Additional data for the notification

  // Relations
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime         @default(now())
  readAt    DateTime?

  @@map("notifications")
}

// Enums
enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum PriceType {
  FIXED
  NEGOTIABLE
  FREE
  CONTACT
}

enum Condition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
  POOR
}

enum ListingStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  EXPIRED
  SOLD
  REMOVED
}

enum ReportReason {
  SPAM
  INAPPROPRIATE
  SCAM
  DUPLICATE
  WRONG_CATEGORY
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

enum TransactionType {
  PREMIUM_LISTING
  FEATURED_LISTING
  SPONSORED_LISTING
  SUBSCRIPTION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  LISTING_APPROVED
  LISTING_REJECTED
  LISTING_EXPIRED
  MESSAGE_RECEIVED
  REVIEW_RECEIVED
  PREMIUM_EXPIRED
  SYSTEM_ALERT
}
